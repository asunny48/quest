name: Terraform

on:
  workflow_call:
    secrets:
      # GITHUB_PAT:
      #   required: true
      # GIT_SSH_KEY:
      #   required: true
      # TF_API_TOKEN:
      #   required: false

# env:
    # If you use private modules you'll need this env variable to use
    # the same ssh-agent socket value across all jobs & steps.
    # SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      # GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # If you use private modules, add an environment variable or secret
      # called GIT_SSH_KEY with your private key, so Infracost can access
      # private repositories (similar to how Terraform/Terragrunt does).
      # - name: add GIT_SSH_KEY
      #   run: |
      #     ssh-agent -a "${{ env.SSH_AUTH_SOCK }}" > /dev/null
      #     mkdir -p $HOME/.ssh
      #     echo "${{ secrets.GIT_SSH_KEY }}" | tr -d '\r' | ssh-add -
      #     ssh-keyscan github.com >> $HOME/.ssh/known_hosts

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Post Format
        if: always() && github.ref != 'refs/heads/master' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: fmt
          commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

#       - name: Terraform Init
#         id: init
#         run: terraform init

#       - name: Post Init
#         if: always() && github.ref != 'refs/heads/master' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
#         uses: robburger/terraform-pr-commenter@v1
#         with:
#           commenter_type: init
#           commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
#           commenter_exitcode: ${{ steps.init.outputs.exitcode }}

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate

#       - name: Post Validate
#         if: always() && github.ref != 'refs/heads/master' && (steps.validate.outcome == 'success' || steps.validate.outcome == 'failure')
#         uses: robburger/terraform-pr-commenter@v1
#         with:
#           commenter_type: validate
#           commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
#           commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

#       - name: Terraform Plan
#         id: plan
#         run: terraform plan -out workspace.plan

#       - name: Post Plan
#         if: always() && github.ref != 'refs/heads/master' && (steps.plan.outcome == 'success' || steps.plan.outcome == 'failure')
#         uses: robburger/terraform-pr-commenter@v1
#         with:
#           commenter_type: plan
#           commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
#           commenter_exitcode: ${{ steps.plan.outputs.exitcode }}

      # - name: Terraform Apply
      #   id: apply
      #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      #   run: terraform apply workspace.plan